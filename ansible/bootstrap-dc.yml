---
- name: Promote and configure Domain Controllers
  hosts: windows
  gather_facts: no

  vars:
    domain_name: corp.infolab
    domain_admin_password: "{{ ansible_password }}"

  tasks:
    - name: Set DNS to DC1
      win_dns_client:
        adapter_names: '*'
        ipv4_addresses:
          - 10.100.1.100

    - name: Install AD, DNS, DHCP roles
      win_feature:
        name:
          - AD-Domain-Services
          - DNS
          - DHCP
        state: present
        include_management_tools: yes

    - name: Promote first server as new forest root domain
      win_domain:
        dns_domain_name: "{{ domain_name }}"
        safe_mode_password: "{{ ansible_password }}"
        domain_admin_user: "{{ ansible_user }}"
        domain_admin_password: "{{ ansible_password }}"
      when: inventory_hostname == "dc1"

    - name: Set DNS forwarders (Google + Cloudflare)
      win_shell: |
        Add-DnsServerForwarder -IPAddress 8.8.8.8,1.1.1.1
      when: inventory_hostname == "dc1"

    - name: Reboot DC1 after promotion
      win_reboot:
        msg: "Rebooting DC1 after domain promotion"
        pre_reboot_delay: 15
      when: inventory_hostname == "dc1"

    - name: Wait for DC1 DNS to resolve domain
      win_shell: |
        $attempts = 0
        do {
          try {
            Resolve-DnsName -Name "{{ domain_name }}" -ErrorAction Stop
            Write-Host "✅ Domain resolved"
            $found = $true
          } catch {
            Write-Host "❌ Domain not found, retrying..."
            Start-Sleep -Seconds 10
            $attempts++
          }
        } until ($found -or $attempts -ge 12)
      when: inventory_hostname == "dc2"

    - name: Wait for DC1 LDAP port from DC2
      win_shell: |
        $tcpClient = New-Object System.Net.Sockets.TcpClient
        $result = $tcpClient.BeginConnect("10.100.1.100", 389, $null, $null)
        $wait = $result.AsyncWaitHandle.WaitOne(300000)  # 5 min timeout
        if (-not $wait) { throw "Timeout waiting for port 389" }
      when: inventory_hostname == "dc2"

    - name: Join second server to existing domain
      win_domain_membership:
        dns_domain_name: "{{ domain_name }}"
        domain_admin_user: "{{ domain_name }}\\Administrator"
        domain_admin_password: "{{ domain_admin_password }}"
        state: domain
      when: inventory_hostname == "dc2"

    - name: Reboot DC2 after join
      win_reboot:
        msg: "Rebooting DC2 after domain join"
        pre_reboot_delay: 10
      when: inventory_hostname == "dc2"
